{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mateusrios/Projetos/rocketseat/pomodoru/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallangeContext } from \"./ChallangesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  let countdownTimeout;\n  let allMinutes = 25;\n  const {\n    startNewChallange\n  } = useContext(ChallangeContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(allMinutes * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      // resetCountdown();\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallange();\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(allMinutes * 60);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      isActive,\n      hasFinished,\n      minutes,\n      seconds,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/mateusrios/Projetos/rocketseat/pomodoru/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallangeContext","CountdownContext","CountdownProvider","children","countdownTimeout","allMinutes","startNewChallange","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","setTimeout","startCountdown","resetCountdown","clearTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAaA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAgE;AAErE,MAAIC,gBAAJ;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBT,UAAU,CAACG,gBAAD,CAAxC;AAEA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAACM,UAAU,GAAG,EAAd,CAAhC;AACA,QAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGW,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAyB;AACvBH,MAAAA,gBAAgB,GAAGa,UAAU,CAAC,MAAM;AAClCT,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAGE,QAAQ,IAAIF,IAAI,KAAK,CAAxB,EAA2B;AAChC;AACAK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AAEAJ,MAAAA,iBAAiB;AAClB;AACF,GAZQ,EAYN,CAACG,QAAD,EAAWF,IAAX,CAZM,CAAT;;AAcA,WAASW,cAAT,GAA2B;AACzBR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,WAASS,cAAT,GAA2B;AACzBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAM,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAACH,UAAU,GAAG,EAAd,CAAP;AACD;;AAED,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,QADK;AAELE,MAAAA,WAFK;AAGLE,MAAAA,OAHK;AAILG,MAAAA,OAJK;AAKLE,MAAAA,cALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGhB;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallangeContext } from \"./ChallangesContext\";\n\ninterface CountdownContextData {\n  isActive: boolean;\n  hasFinished: boolean;\n  minutes: number;\n  seconds: number;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\ninterface CountdownProviderProps {\n  children:ReactNode;\n}\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nexport function CountdownProvider( {children}:CountdownProviderProps ) {\n\n  let countdownTimeout:NodeJS.Timeout;\n  let allMinutes = 25;\n  const { startNewChallange } = useContext(ChallangeContext);\n\n  const [time, setTime] = useState(allMinutes * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false)\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  useEffect(() => {\n    if(isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000)\n    } else if(isActive && time === 0) {\n      // resetCountdown();\n      setHasFinished(true);\n      setIsActive(false);\n\n      startNewChallange();\n    }\n  }, [isActive, time])\n\n  function startCountdown () {\n    setIsActive(true);\n  }\n  function resetCountdown () {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(allMinutes * 60);\n  }\n\n  return(\n    <CountdownContext.Provider\n      value={{\n        isActive,\n        hasFinished,\n        minutes,\n        seconds,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}