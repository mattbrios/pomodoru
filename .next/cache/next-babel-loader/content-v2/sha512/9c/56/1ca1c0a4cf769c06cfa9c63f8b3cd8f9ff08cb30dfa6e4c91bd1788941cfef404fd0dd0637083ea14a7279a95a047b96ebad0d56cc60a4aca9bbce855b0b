{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mateusrios/Projetos/rocketseat/pomodoru/src/contexts/ChallangesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useEffect, useState } from 'react';\nimport challanges from '../../challenges.json';\nimport Cookies from 'js-cookie';\nimport { isIOS } from 'react-device-detect';\nimport { LevelUpModal } from '../components/LevelUpModal';\nexport const ChallangeContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider(_ref) {\n  var _props$name, _props$photo, _props$level, _props$currentXP, _props$challangesComp, _props$isLogged;\n\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: name,\n    1: setName\n  } = useState((_props$name = props.name) !== null && _props$name !== void 0 ? _props$name : null);\n  const {\n    0: photo,\n    1: setPhoto\n  } = useState((_props$photo = props.photo) !== null && _props$photo !== void 0 ? _props$photo : \"\");\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_props$level = props.level) !== null && _props$level !== void 0 ? _props$level : 1);\n  const {\n    0: currentXP,\n    1: setCurrentXP\n  } = useState((_props$currentXP = props.currentXP) !== null && _props$currentXP !== void 0 ? _props$currentXP : 0);\n  const {\n    0: challangesCompleted,\n    1: setChallangesCompleted\n  } = useState((_props$challangesComp = props.challangesCompleted) !== null && _props$challangesComp !== void 0 ? _props$challangesComp : 0);\n  const {\n    0: activeChallange,\n    1: setActiveChallange\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const {\n    0: isLogged,\n    1: setIsLogged\n  } = useState((_props$isLogged = props.isLogged) !== null && _props$isLogged !== void 0 ? _props$isLogged : false);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    if (!isIOS) {\n      Notification.requestPermission();\n    }\n  }, []);\n  useEffect(() => {\n    Cookies.set('name', String(name));\n    Cookies.set('photo', String(photo));\n    Cookies.set('level', String(level));\n    Cookies.set('currentXP', String(currentXP));\n    Cookies.set('challangesCompleted', String(challangesCompleted));\n    Cookies.set('isLogged', String(isLogged));\n    console.log(\"PASSA AQUI\", String(name));\n  }, [name, photo, level, currentXP, challangesCompleted, isLogged]);\n\n  function startApp(name, photo) {\n    setName(name);\n    setPhoto(photo);\n    setIsLogged(true);\n    setTimeout(() => {\n      window.location.reload();\n    }, 500);\n  }\n\n  function startNewChallange() {\n    const randomChallangeIndex = Math.floor(Math.random() * challanges.length);\n    const challange = challanges[randomChallangeIndex];\n    setActiveChallange(challange);\n\n    if (!isIOS) {\n      new Audio('/notification.mp3').play();\n\n      if (Notification.permission === 'granted') {\n        new Notification('Atenção! Novo desafio! Move it!', {\n          body: `Desafio agora valendo ${challange.amount}xp e ${challange.prize}`,\n          icon: '/favicon.png'\n        });\n      }\n    }\n  }\n\n  ;\n\n  function skipChallange() {\n    setActiveChallange(null);\n  }\n\n  function resetCookies() {\n    Cookies.remove('name');\n    Cookies.remove('photo');\n    Cookies.remove('level');\n    Cookies.remove('currentXP');\n    Cookies.remove('challangesCompleted');\n    Cookies.remove('isLogged');\n    setCurrentXP(0);\n    setName(undefined);\n    setPhoto(undefined);\n    setLevel(1);\n    setChallangesCompleted(0);\n    setActiveChallange(null);\n    setIsLogged(false);\n    window.location.reload();\n  }\n\n  function challangeCompleted() {\n    if (!activeChallange) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallange;\n    let finalExperience = currentXP + amount;\n\n    if (finalExperience > experienceToNextLevel) {\n      setLevel(level + 1);\n      setIsLevelUpModalOpen(true);\n      new Audio('/winner.mp3').play();\n      finalExperience = finalExperience - experienceToNextLevel;\n    }\n\n    setCurrentXP(finalExperience);\n    setActiveChallange(null);\n    setChallangesCompleted(challangesCompleted + 1);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangeContext.Provider, {\n    value: {\n      name,\n      photo,\n      level,\n      currentXP,\n      experienceToNextLevel,\n      challangesCompleted,\n      activeChallange,\n      isLogged,\n      startNewChallange,\n      skipChallange,\n      challangeCompleted,\n      closeLevelUpModal,\n      resetCookies,\n      startApp\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/mateusrios/Projetos/rocketseat/pomodoru/src/contexts/ChallangesContext.tsx"],"names":["createContext","useEffect","useState","challanges","Cookies","isIOS","LevelUpModal","ChallangeContext","ChallangesProvider","children","props","name","setName","photo","setPhoto","level","setLevel","currentXP","setCurrentXP","challangesCompleted","setChallangesCompleted","activeChallange","setActiveChallange","isLevelUpModalOpen","setIsLevelUpModalOpen","isLogged","setIsLogged","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","console","log","startApp","setTimeout","window","location","reload","startNewChallange","randomChallangeIndex","floor","random","length","challange","Audio","play","permission","body","amount","prize","icon","skipChallange","resetCookies","remove","undefined","challangeCompleted","finalExperience","closeLevelUpModal"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\nimport challanges from '../../challenges.json';\nimport Cookies from 'js-cookie';\n\nimport { isIOS } from 'react-device-detect';\nimport { LevelUpModal } from '../components/LevelUpModal';\n\ninterface Challange {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n  prize: string;\n}\n\ninterface ChallangesContextData {\n  name: string;\n  photo: string;\n  level: number;\n  currentXP: number;\n  experienceToNextLevel: number;\n  challangesCompleted: number;\n  activeChallange: Challange;\n  isLogged: boolean;\n  startNewChallange: () => void;\n  skipChallange: () => void;\n  challangeCompleted: () => void;\n  closeLevelUpModal: () => void;\n  resetCookies: () => void;\n  startApp: (name, photo) => void;\n}\ninterface ChallangeProviderProps {\n  children: ReactNode;\n  name: string;\n  photo: string;\n  level: number;\n  currentXP: number;\n  challangesCompleted: number;\n  isLogged: boolean;\n}\n\nexport const ChallangeContext = createContext({}as ChallangesContextData);\n\nexport function ChallangesProvider( {children, ...props}:ChallangeProviderProps ) {\n  const [name, setName] = useState(props.name ?? null);\n  const [photo, setPhoto] = useState(props.photo ?? \"\");\n  const [level, setLevel] = useState(props.level ?? 1);\n  const [currentXP, setCurrentXP] = useState(props.currentXP ?? 0);\n  const [challangesCompleted, setChallangesCompleted] = useState(props.challangesCompleted ?? 0);\n  const [activeChallange, setActiveChallange] = useState(null);\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);\n  const [isLogged, setIsLogged] = useState(props.isLogged ?? false);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  useEffect(() => {\n    if(!isIOS){\n      Notification.requestPermission();\n    }\n  },[]);\n\n  useEffect(() => {\n    Cookies.set('name', String(name));\n    Cookies.set('photo', String(photo));\n    Cookies.set('level', String(level));\n    Cookies.set('currentXP', String(currentXP));\n    Cookies.set('challangesCompleted', String(challangesCompleted));\n    Cookies.set('isLogged', String(isLogged));\n    console.log(\"PASSA AQUI\", String(name))\n  },[name, photo, level, currentXP, challangesCompleted, isLogged]);\n\n  function startApp(name, photo) {\n    setName(name);\n    setPhoto(photo);\n    setIsLogged(true);\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 500);\n  }\n\n  function startNewChallange() {\n    const randomChallangeIndex = Math.floor(Math.random() * challanges.length);\n    const challange = challanges[randomChallangeIndex];\n    setActiveChallange(challange);\n\n    if( !isIOS ) {\n      new Audio('/notification.mp3').play();\n      if( Notification.permission === 'granted' ) {\n        new Notification('Atenção! Novo desafio! Move it!', {\n          body: `Desafio agora valendo ${challange.amount}xp e ${challange.prize}`,\n          icon: '/favicon.png'\n        });\n      }\n    }\n  };\n\n  function skipChallange() {\n    setActiveChallange(null);\n  }\n\n  function resetCookies() {\n    Cookies.remove('name');\n    Cookies.remove('photo');\n    Cookies.remove('level');\n    Cookies.remove('currentXP');\n    Cookies.remove('challangesCompleted');\n    Cookies.remove('isLogged');\n\n    setCurrentXP(0);\n    setName(undefined);\n    setPhoto(undefined);\n    setLevel(1);\n    setChallangesCompleted(0);\n    setActiveChallange(null);\n    setIsLogged(false);\n\n    window.location.reload();\n  }\n\n  function challangeCompleted() {\n    if(!activeChallange) {\n      return;\n    }\n\n    const { amount } = activeChallange;\n    let finalExperience = currentXP + amount;\n    if(finalExperience > experienceToNextLevel) {\n      setLevel(level + 1);\n      setIsLevelUpModalOpen(true);\n      new Audio('/winner.mp3').play();\n      finalExperience = finalExperience - experienceToNextLevel;\n    }\n    setCurrentXP(finalExperience)\n    setActiveChallange(null);\n    setChallangesCompleted(challangesCompleted + 1);\n  }\n  function closeLevelUpModal () {\n    setIsLevelUpModalOpen(false);\n  }\n  \n  return (\n    <ChallangeContext.Provider\n      value={{\n        name, \n        photo, \n        level, \n        currentXP,\n        experienceToNextLevel,\n        challangesCompleted,\n        activeChallange,\n        isLogged,\n        startNewChallange,\n        skipChallange,\n        challangeCompleted,\n        closeLevelUpModal,\n        resetCookies,\n        startApp,\n      }}\n    >\n      {children}\n      {isLevelUpModalOpen && (\n        <LevelUpModal />\n      )}\n    </ChallangeContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}